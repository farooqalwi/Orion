general class MyClass
{
	general inactive void main ()
	{	
		num myNumber = 10# @value should be any integer
		decimal myDecimalNumber = 10.5# @value should be any decimal number
		char MyCharacter = 'a'# @any ascii character
		bool myBool = true#
		bool myBool = false#
		bool myBool = !true#

		final num myNumber = 10#
		general num myNumber = 10#
		
		

		when (true)
		{
			myNum ++#
			myNum --#
			jump# @it will jump to the next iteration
		}
		lest
		{
			myNumber = fisrtNum - secondNum#
			skip# @it will skip the hole loop iteration
		}

		until (number is 10)
		{
			myfunction()#
		}

		when (myNum is 10 or myNum is 20)
		{
			myfunction()#
			print(fisrtVar, secondVar)#
		}

		loop (1, 10)
		{
			print("ALWI")#
		}

		try
		{
			@something has to be tried
		}
		except
		{
			@errors have to be handled
		}
		finally
		{
			@always runs
		}
	}	
}


general class ParentClass
{
	@this is parent class
}

general class SubClass inherits ParentClass
{
	@this is child class inheriting parent class
}

symbolic class TestClass
{
	general symbolic void myMethod()#
}



general class ParentClass
{
	general void myMethod(num myNum)
	{
		base.number = myNum#
	}
}


general class SubClass inherits ParentClass
{
	general void myFunction(num myNum)
	{
		base.myMethod(myNum)# @call parent class method
	}
}







